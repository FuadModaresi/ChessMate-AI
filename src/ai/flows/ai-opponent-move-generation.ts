// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview This file defines a Genkit flow for generating chess moves by an AI opponent.
 *
 * - aiOpponentMove - A function that takes the current board state and difficulty level and returns a chess move in UCI notation.
 * - AiOpponentMoveInput - The input type for the aiOpponentMove function.
 * - AiOpponentMoveOutput - The return type for the aiOpponentMove function, representing a chess move in UCI notation.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AiOpponentMoveInputSchema = z.object({
  boardState: z.string().describe('The current state of the chess board in FEN notation.'),
  difficulty: z
    .enum(['Beginner', 'Intermediate', 'Advanced'])
    .describe('The difficulty level of the AI opponent.'),
});
export type AiOpponentMoveInput = z.infer<typeof AiOpponentMoveInputSchema>;

const AiOpponentMoveOutputSchema = z
  .string()
  .describe('The chess move generated by the AI opponent in UCI notation.');
export type AiOpponentMoveOutput = z.infer<typeof AiOpponentMoveOutputSchema>;

export async function aiOpponentMove(input: AiOpponentMoveInput): Promise<AiOpponentMoveOutput> {
  return aiOpponentMoveFlow(input);
}

const aiOpponentMovePrompt = ai.definePrompt({
  name: 'aiOpponentMovePrompt',
  input: {schema: AiOpponentMoveInputSchema},
  output: {schema: AiOpponentMoveOutputSchema},
  prompt: `You are a chess grandmaster AI, playing against a human opponent.

You are playing at {{difficulty}} difficulty.

Given the current board state in FEN notation: "{{{boardState}}}", generate the best possible chess move in UCI notation for white.
Consider strategic advantages, piece value, and potential threats.
Output ONLY the UCI notation, do not include any other explanations.`,
});

const aiOpponentMoveFlow = ai.defineFlow(
  {
    name: 'aiOpponentMoveFlow',
    inputSchema: AiOpponentMoveInputSchema,
    outputSchema: AiOpponentMoveOutputSchema,
  },
  async input => {
    const {output} = await aiOpponentMovePrompt(input);
    return output!;
  }
);
